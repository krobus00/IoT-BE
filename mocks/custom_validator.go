// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	testing "testing"

	mock "github.com/stretchr/testify/mock"

	validator "github.com/go-playground/validator/v10"
)

// CustomValidator is an autogenerated mock type for the CustomValidator type
type CustomValidator struct {
	mock.Mock
}

// ExistValidator provides a mock function with given fields: fl
func (_m *CustomValidator) ExistValidator(fl validator.FieldLevel) bool {
	ret := _m.Called(fl)

	var r0 bool
	if rf, ok := ret.Get(0).(func(validator.FieldLevel) bool); ok {
		r0 = rf(fl)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// UniqueValidator provides a mock function with given fields: fl
func (_m *CustomValidator) UniqueValidator(fl validator.FieldLevel) bool {
	ret := _m.Called(fl)

	var r0 bool
	if rf, ok := ret.Get(0).(func(validator.FieldLevel) bool); ok {
		r0 = rf(fl)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewCustomValidator creates a new instance of CustomValidator. It also registers a cleanup function to assert the mocks expectations.
func NewCustomValidator(t testing.TB) *CustomValidator {
	mock := &CustomValidator{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
