// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	krobot_building_blockmodel "github.com/krobus00/krobot-building-block/model"
	mock "github.com/stretchr/testify/mock"

	model "github.com/krobus00/iot-be/model"

	testing "testing"
)

// SensorService is an autogenerated mock type for the SensorService type
type SensorService struct {
	mock.Mock
}

// DeleteSensorByID provides a mock function with given fields: ctx, payload
func (_m *SensorService) DeleteSensorByID(ctx context.Context, payload *model.DeleteSensorRequest) error {
	ret := _m.Called(ctx, payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.DeleteSensorRequest) error); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllSensor provides a mock function with given fields: ctx, payload
func (_m *SensorService) GetAllSensor(ctx context.Context, payload *krobot_building_blockmodel.PaginationRequest) (*krobot_building_blockmodel.PaginationResponse, error) {
	ret := _m.Called(ctx, payload)

	var r0 *krobot_building_blockmodel.PaginationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *krobot_building_blockmodel.PaginationRequest) *krobot_building_blockmodel.PaginationResponse); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*krobot_building_blockmodel.PaginationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *krobot_building_blockmodel.PaginationRequest) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetForecastData provides a mock function with given fields: ctx, payload
func (_m *SensorService) GetForecastData(ctx context.Context, payload *model.GetForecastDataRequest) (*model.GetForecastDataResponse, error) {
	ret := _m.Called(ctx, payload)

	var r0 *model.GetForecastDataResponse
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetForecastDataRequest) *model.GetForecastDataResponse); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetForecastDataResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.GetForecastDataRequest) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResampledData provides a mock function with given fields: ctx, payload
func (_m *SensorService) GetResampledData(ctx context.Context, payload *model.GetProcessedDataRequest) (*model.GetProcessedDataResponse, error) {
	ret := _m.Called(ctx, payload)

	var r0 *model.GetProcessedDataResponse
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetProcessedDataRequest) *model.GetProcessedDataResponse); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetProcessedDataResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.GetProcessedDataRequest) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSensorByID provides a mock function with given fields: ctx, payload
func (_m *SensorService) GetSensorByID(ctx context.Context, payload *model.ShowSensorRequest) (*model.SensorResponse, error) {
	ret := _m.Called(ctx, payload)

	var r0 *model.SensorResponse
	if rf, ok := ret.Get(0).(func(context.Context, *model.ShowSensorRequest) *model.SensorResponse); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SensorResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.ShowSensorRequest) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreSensor provides a mock function with given fields: ctx, payload
func (_m *SensorService) StoreSensor(ctx context.Context, payload *model.CreateSensorRequest) error {
	ret := _m.Called(ctx, payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateSensorRequest) error); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSensorByID provides a mock function with given fields: ctx, payload
func (_m *SensorService) UpdateSensorByID(ctx context.Context, payload *model.UpdateSensorRequest) error {
	ret := _m.Called(ctx, payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UpdateSensorRequest) error); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSensorService creates a new instance of SensorService. It also registers a cleanup function to assert the mocks expectations.
func NewSensorService(t testing.TB) *SensorService {
	mock := &SensorService{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
