// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/krobus00/iot-be/model"

	testing "testing"
)

// DataRequester is an autogenerated mock type for the DataRequester type
type DataRequester struct {
	mock.Mock
}

// CallForecastData provides a mock function with given fields: _a0, payload
func (_m *DataRequester) CallForecastData(_a0 context.Context, payload *model.GetForecastRequest) ([]*model.GetForecastData, error) {
	ret := _m.Called(_a0, payload)

	var r0 []*model.GetForecastData
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetForecastRequest) []*model.GetForecastData); ok {
		r0 = rf(_a0, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.GetForecastData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.GetForecastRequest) error); ok {
		r1 = rf(_a0, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CallResamplingData provides a mock function with given fields: _a0, payload
func (_m *DataRequester) CallResamplingData(_a0 context.Context, payload *model.GetAllSensorResponse) ([]*model.GetSampledData, error) {
	ret := _m.Called(_a0, payload)

	var r0 []*model.GetSampledData
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetAllSensorResponse) []*model.GetSampledData); ok {
		r0 = rf(_a0, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.GetSampledData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.GetAllSensorResponse) error); ok {
		r1 = rf(_a0, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDataRequester creates a new instance of DataRequester. It also registers a cleanup function to assert the mocks expectations.
func NewDataRequester(t testing.TB) *DataRequester {
	mock := &DataRequester{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
