// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	krobot_building_blockmodel "github.com/krobus00/krobot-building-block/model"
	mock "github.com/stretchr/testify/mock"

	model "github.com/krobus00/iot-be/model"

	testing "testing"
)

// NodeService is an autogenerated mock type for the NodeService type
type NodeService struct {
	mock.Mock
}

// GetAccessToken provides a mock function with given fields: ctx, payload
func (_m *NodeService) GetAccessToken(ctx context.Context, payload *model.GetAccessTokenRequest) (*model.GetAccessTokenResponse, error) {
	ret := _m.Called(ctx, payload)

	var r0 *model.GetAccessTokenResponse
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetAccessTokenRequest) *model.GetAccessTokenResponse); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetAccessTokenResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.GetAccessTokenRequest) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllNodes provides a mock function with given fields: ctx, payload
func (_m *NodeService) GetAllNodes(ctx context.Context, payload *krobot_building_blockmodel.PaginationRequest) (*krobot_building_blockmodel.PaginationResponse, error) {
	ret := _m.Called(ctx, payload)

	var r0 *krobot_building_blockmodel.PaginationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *krobot_building_blockmodel.PaginationRequest) *krobot_building_blockmodel.PaginationResponse); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*krobot_building_blockmodel.PaginationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *krobot_building_blockmodel.PaginationRequest) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodeInfo provides a mock function with given fields: ctx
func (_m *NodeService) GetNodeInfo(ctx context.Context) (*model.GetNodeInfoResponse, error) {
	ret := _m.Called(ctx)

	var r0 *model.GetNodeInfoResponse
	if rf, ok := ret.Get(0).(func(context.Context) *model.GetNodeInfoResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetNodeInfoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodeInfoByID provides a mock function with given fields: ctx, payload
func (_m *NodeService) GetNodeInfoByID(ctx context.Context, payload *model.GetNodeInfoPayload) (*model.GetNodeInfoResponse, error) {
	ret := _m.Called(ctx, payload)

	var r0 *model.GetNodeInfoResponse
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetNodeInfoPayload) *model.GetNodeInfoResponse); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetNodeInfoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.GetNodeInfoPayload) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, payload
func (_m *NodeService) Register(ctx context.Context, payload *model.RegisterRequest) (*string, error) {
	ret := _m.Called(ctx, payload)

	var r0 *string
	if rf, ok := ret.Get(0).(func(context.Context, *model.RegisterRequest) *string); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.RegisterRequest) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewNodeService creates a new instance of NodeService. It also registers a cleanup function to assert the mocks expectations.
func NewNodeService(t testing.TB) *NodeService {
	mock := &NodeService{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
