package {{ .PackageName }}

import (
	"context"
	kro_model "github.com/krobus00/krobot-building-block/model"
	"github.com/jmoiron/sqlx"
	"{{ .ModuleName }}/infrastructure"
	db_models "{{ .ModuleName }}/model/database"
)

const (
	tag = `[{{ .EntityName }}Repository]`

	tracingGetAll{{ .EntityName }}     = "GetAll{{ .EntityName }}"
	tracingGet{{ .EntityName }}ByID    = "Get{{ .EntityName }}ByID"
	tracingStore{{ .EntityName }}      = "Store{{ .EntityName }}"
	tracingUpdate{{ .EntityName }}ByID = "Update{{ .EntityName }}ByID"
	tracingDelete{{ .EntityName }}ByID = "Delete{{ .EntityName }}ByID"
)

type (
	Repository interface {
		GetTableName() string
		GetAll{{ .EntityName }}(ctx context.Context, db kro_pkg.Querier, paginationRequest *kro_model.PaginationRequest, config ...kro_model.Config) ([]*db_models.{{ .EntityName }}, int64, error)
		Store(ctx context.Context, db kro_pkg.Querier, input *db_models.{{ .EntityName }}) error
		Get{{ .EntityName }}ByID(ctx context.Context, db kro_pkg.Querier, input *db_models.{{ .EntityName }}) (*db_models.{{ .EntityName }}, error)
		Update{{ .EntityName }}ByID(ctx context.Context, db kro_pkg.Querier, input *db_models.{{ .EntityName }}) error
		Delete{{ .EntityName }}ByID(ctx context.Context, db kro_pkg.Querier, input *db_models.{{ .EntityName }}) error
	}
	repository struct {
		logger infrastructure.Logger
	}
)

func New(infrastructure infrastructure.Infrastructure) Repository {
	return &repository{
		logger: infrastructure.Logger,
	}
}

func (r *repository) GetTableName() string {
	return "{{ .TableName }}"
}
